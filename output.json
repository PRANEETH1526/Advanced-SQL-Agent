[
    {
        "id": 457696648489598976,
        "text": "\n    Tags: component, component ID, ordered, purchased, date, year, price, total, quantity, category, type, \n\n#### Tables:\n1. **purchase_orders**  \n   - **Description**: Stores purchase order details covering vendor info, authorization, shipping, and financial terms.  \n   - **COMMENT Section**:  \n     - Tracks order revisions, approvals (`auth_id`, `auth_date`, etc.), and associated notes (`amended_notes`, `order_comments`, `delivery_comments`, `notes`).  \n     - Includes vendor contact details (`vendor_name`, `attention`, `address`, `vendor_email`, `vendor_fax`), shipping methods (`shipping`, `shipping_extra`), and incoterms.  \n     - Contains fields for document attachments and invoicing (`attachments`, `po_email_attachments`, `po_invoicing_check`) plus internal payment terms and status flags (`po_status`, `po_closed`). \n     - **Joins**:  \n       - `purchase_order_lines.po_id = purchase_orders.id` (Each line belongs to a purchase order).  \n       - `comp_lot.purchase_order = purchase_orders.po_no` (Each lot was purchased on a purchase order).  \n       - `purchase_orders.vendor_id = Company.CompanyID`.\n\n2. **purchase_order_lines**  \n   - **Description**: Tracks individual line items for purchase orders, providing detailed insight into each order\u2019s components and pricing.  \n   - **COMMENT Section**:  \n     - The primary key `id` uniquely identifies each line, and `po_id` links the line to its parent order, while `lot_no` optionally ties the line to a specific inventory lot.  \n     - Key fields include `qty_type` (unit of measure), `vendor_code` (vendor\u2019s item identifier), `description`, `price`, and `qty`.  \n     - Shipment dates (`drop_date`, `po_line_edd`) and GST applicability (`gst_applicable_line`) define delivery terms.  \n     - Versioning is tracked via `version_timestamp`, `version_editor`, and `version_number`.  \n     - Order status is managed with `cancelled` and `received` (non-lot items) flags, while authorization controls (`non_preferred_auth`, `price_increase_auth`, `auth_time_price`) and supplementary notes (`pol_purchasing_notes`, `pol_internal_notes`, `pol_freight_tracking`, `pol_risk`, `pol_inspection_instructions`, `pol_supplier_requirements`, `pol_quote_ref`) support internal controls and risk management.  \n     - **Joins**:  \n       - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).\n\n3. **component**  \n   - **Description**: Stores component data representing groups of parts conforming to specific specifications. Each component is uniquely identified (e.g., ID6334) and includes a descriptive field detailing its purpose and application.  \n   - **COMMENT Section**:  \n     - Components are categorized (e.g., capacitor, resistor, end product, subassembly) via the `component.cat_no` field, which links to `category.ID` for added context.  \n     - Functionally equivalent manufacturer parts are grouped under one component ID to support flexible sourcing.  \n     - Sourcing details (including vendor and manufacturer part numbers) are managed in the `comp_src` table, while lot tracking\u2014with identifiers formatted as DDMMYY-X (and appended suffixes for split lots)\u2014is handled in `comp_lot`.  \n     - In-house production details and BOMs (e.g., PCB revisions and codes) are captured in related tables to aid production planning and quality control.  \n     - **Joins**:  \n       - `component.ID = comp_src.ID` (Each sourcing record is linked to a component via its ID).  \n       - `category.cat_no = category.ID` (Each component is of a particular category).\n\n4. **comp_lot**  \n   - **Description**: Tracks detailed information for component lots, providing batch-level visibility into inventory and sourcing.  \n   - **COMMENT Section**:  \n     - The primary key `lot_id` uniquely identifies each lot, while `lot_no` serves as a human-readable identifier formatted as DDMMYY-X, with optional suffixes for split lots.  \n     - Key fields include `lot_date` (creation date), `on_order` (flag to indicate that it is not yet received), `price` (per part in AUD), `on_hand` (current inventory), and `purchase_order` with `purchased_amount` (acquisition details).  \n     - `edd` is the expected delivery date while the lot is on order, after which it represents the receive date.  \n     - The `source_ID` field links each lot to its sourcing record in `comp_src`, ensuring traceability.  \n     - Additional fields capture storage specifics (`location_ID`, `shelf`, `position`, `box_id`), versioning (`version_timestamp`, `version_editor`, `version_number`), quality control data (`qc_notes`, `qc_pass`, `qc_who`, `qc_date`), pricing, and supplementary notes, supporting comprehensive inventory and quality management.  \n     - **Joins**:  \n       - `comp_src.source_ID = comp_lot.source_ID` (Each sourcing record links to a specific lot via `source_ID`).  \n       - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).  \n       - `comp_lot.purchase_order = purchase_orders.pono` (Each lot was purchased on a particular PO).  \n\n5. **comp_src**\n   - **Description**: Stores sourcing details for components, linking each component\u2019s `ID` to its associated vendor and manufacturer data. Records include `vendor_part_no` and `manufacturer_part_no`, ensuring that parts from different manufacturers but functionally equivalent are grouped under a single component. The `manufacturer` field and `vendor_ID` reference corresponding `Company` IDs, facilitating integration with vendor data. The `source_ID` field connects sourcing records to specific component lots in `comp_lot`, enhancing traceability.\n   - **COMMENT Section**:\n     - Join on `component.ID = comp_src.ID` (each sourcing record is linked to a component via its ID).\n     - Join on `comp_src.source_ID = comp_lot.source_ID` (each sourcing record links to a specific lot via `source_ID`).\n     - Join on `comp_src.manufacturer = Company.CompanyID` (each sourcing record is linked to a Company as a manufacturer).\n     - Join on `comp_src.vendor_ID = Company.CompanyID` (each sourcing record is linked to a Company as a vendor).\n\n6. **category**\n   - **Description**: Category table is used to categorize components into different categories - e.g., integrated circuit, capacitor, resistor, metalwork.\n   - **COMMENT Section**:\n     - Key field is `ID`.\n     - `category.category` field is a text field indicating the component category.\n     - Joins to `component` table on `component.cat_no = category.ID`.\n\n---\n\n#### Key Relationships:\n1. **purchase_orders \u2192 purchase_order_lines**:  \n   - `purchase_order_lines.po_id = purchase_orders.id` (Each line belongs to a purchase order).  \n\n2. **purchase_order_lines \u2192 component**:  \n   - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).  \n   - `component.ID` uniquely identifies the component (e.g., 6334).  \n\n3. **purchase_order_lines \u2192 comp_lot**:  \n   - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).  \n\n4. **comp_lot \u2192 purchase_orders**:  \n   - `comp_lot.purchase_order = purchase_orders.pono` (Each lot was purchased on a particular purchase order).  \n\n5. **comp_lot \u2192 comp_src**:\n   - `comp_lot.source_ID = comp_src.source_ID` (Each lot is linked to a sourcing record for traceability).\n\n6. **comp_lot \u2192 purchase_order_lines**:\n   - `purchase_order_lines.lot_no = comp_lot.lot_no` (Each purchase order line may reference a specific inventory lot).\n\n7. **comp_src \u2192 component**:\n   - `comp_src.ID = component.ID` (Each sourcing record is linked to a specific component).\n\n8. **component \u2192 category**:\n   - Join Condition: `component.cat_no = category.ID`\n   - Description: Links each component to its respective category, providing context for classification (e.g., capacitor, resistor, etc.).\n\n\n---\n\n#### Relevant Fields for the User Question:\n1. **purchase_orders**:  \n   - `id` (INTEGER): Primary key of the purchase orders table.  \n   - `date_issued` (DATE): Date the purchase order was issued.  \n\n2. **purchase_order_lines**:  \n   - `po_id` (INTEGER): Links the line to its parent purchase order.  \n   - `qty` (FLOAT): Quantity ordered.  \n\n3. **component**:  \n   - `ID` (INTEGER): Primary key and text identifier of the component (e.g., 6334).  \n\n4. **comp_lot**:  \n   - `lot_no` (VARCHAR): Key field linking to `purchase_order_lines.lot_no`.  \n   - `purchase_order` (INTEGER): Links the lot to the purchase order number.  \n   - `purchased_amount` (FLOAT): Quantity purchased in the lot.  \n   - `lot_date` (DATE): Date the lot was created. \n   - `price` (FLOAT): Unit price, converted to AUD.\n   - `source_ID` (INTEGER): Links the lot to its sourcing record in `comp_src`.\n   - `edd` (DATE): Expected delivery date (if on order) or the date the lot was received.\n   - `on_order` (TINYINT): Flag indicating if the lot is still on order (1 = on order).\n\n5.- **From `comp_src`**:\n  - `source_ID` (INTEGER): Primary key for the sourcing record.\n  - `ID` (INTEGER): Links the sourcing record to a specific component.\n  - `vendor_ID` (INTEGER): Links the sourcing record to a vendor in the `Company` table.\n  - `manufacturer` (INTEGER): Links the sourcing record to a manufacturer in the `Company` table.\n  - `vendor_part_no` (VARCHAR): Vendor's identifier for the part.\n  - `manufacturer_part_no` (VARCHAR): Manufacturer's identifier for the part.\n\n6. **From `category`**:\n   - `ID`: Primary key and unique identifier for each category.\n   - `category`: Text field indicating the name of the component category.\n\n#### SQL Example:\n\nCapacitators ordered in 2023:\n\nSELECT SUM(qty) AS 'a) TOTAL EVER', SUM(IF(po.date_issued BETWEEN '2023-01-01' AND '2023-12-31',qty,0)) AS 'TOTAL in 2023'\n\nFROM purchase_orders po\n\nJOIN purchase_order_lines plx ON po.id = plx.po_id\n\nJOIN comp_lot cl ON cl.lot_no = plx.lot_no\n\nJOIN comp_src cs ON cs.source_ID = cl.source_ID\n\nJOIN component c ON cs.id = c.id\n\nJOIN category cat ON c.cat_no = cat.ID\n\nAND cat.category = 'capacitor'\n    "
    },
    {
        "id": 457696648615952386,
        "text": "\n    Tags: dockets, company, delivery\n\n#### Tables:\n**intelli_ddockets**  \n- **Description**: This table stores delivery docket details, including docket numbers, shipping information, client details, and associated metadata.  \n- **COMMENT Section**:  \n  - The `intelli_ddockets` table is primarily used to track delivery dockets.  \n  - Key fields include `ddocket_id` (primary key), `ddocket_no` (delivery docket number), and `shipping_date` (date of delivery).  \n  - The table also contains fields for client information (`client_name`, `address`, `address_country`), shipping details (`shipped_via`, `shipped_via_other`), and additional metadata such as `order_date`, `comments`, and `prepared_by`.  \n  - Relationships:  \n    - The `company_id` field links to the `Company` table, which provides details about the company associated with the delivery docket.  \n    - The `wor_id` field may link to a work order or related table for tracking purposes.  \n\n---\n\n#### Key Relationships:\n1. **intelli_ddockets \u2192 Company**:  \n   - Join Condition: `intelli_ddockets.company_id = Company.CompanyID`  \n   - Purpose: To retrieve company details (e.g., name, address) associated with the delivery docket.  \n---\n\n#### Relevant Fields for the User Question:\n- **intelli_ddockets**:  \n  - `ddocket_no`: The delivery docket number.  \n  - `shipping_date`: The corresponding date of the delivery docket.  \n"
    },
    {
        "id": 457696648661041156,
        "text": "\n    Tags: purchase order, POs, date, shipped\n\n\n#### Tables:\n1. **purchase_order_lines**  \n   - **Description:** Tracks individual line items for purchase orders, providing detailed insight into each order\u2019s components and pricing. The primary key `id` uniquely identifies each line, and `po_id` links the line to its parent order, while `lot_no` optionally ties the line to a specific inventory lot.  \n   - **COMMENT Section:**  \n     - Key fields include `qty_type` (unit of measure), `vendor_code` (vendor\u2019s item identifier), `description`, `price`, and `qty`.  \n     - Shipment dates (`drop_date`, `po_line_edd`) and GST applicability (`gst_applicable_line`) define delivery terms.  \n     - Versioning is tracked via `version_timestamp`, `version_editor`, and `version_number`.  \n     - Order status is managed with `cancelled` and `received` (non-lot items) flags, while authorization controls (`non_preferred_auth`, `price_increase_auth`, `auth_time_price`) and supplementary notes (`pol_purchasing_notes`, `pol_internal_notes`, `pol_freight_tracking`, `pol_risk`, `pol_inspection_instructions`, `pol_supplier_requirements`, `pol_quote_ref`) support internal controls and risk management.  \n     - **Joins:**  \n       - `purchase_order_lines.po_id = purchase_orders.id` (each line belongs to a purchase order).  \n       - `purchase_order_lines.lot_no = comp_lot.lot_no` (if a line references a specific inventory lot).  \n\n2. **purchase_orders**  \n   - **Description:** Stores purchase order details covering vendor info, authorization, shipping, and financial terms.  \n   - **COMMENT Section:**  \n     - Key fields include `id` (PK), `pono`, `date_issued`, `revision`, `vendor_id`, `currency`, `conversion_rate`, and `freight_value`.  \n     - Tracks order revisions, approvals (`auth_id`, `auth_date`, etc.), and associated notes (`amended_notes`, `order_comments`, `delivery_comments`, `notes`).  \n     - Includes vendor contact details (`vendor_name`, `attention`, `address`, `vendor_email`, `vendor_fax`), shipping methods (`shipping`, `shipping_extra`), and incoterms.  \n     - Contains fields for document attachments and invoicing (`attachments`, `po_email_attachments`, `po_invoicing_check`) plus internal payment terms and status flags (`po_status`, `po_closed`).  \n     - Version control is maintained via `version_number`, `version_editor`, and `version_timestamp`.  \n     - **Joins:**  \n       - `purchase_order_lines.po_id = purchase_orders.id` (each line belongs to a purchase order).  \n       - `comp_lot.purchase_order = purchase_orders.po_no` (each lot was purchased on a purchase order).  \n       - `purchase_orders.vendor_id = Company.CompanyID`.  \n\n---\n\n#### Key Relationships:\n1. **purchase_order_lines \u2192 purchase_orders**  \n   - Join Condition: `purchase_order_lines.po_id = purchase_orders.id`  \n   - Description: Links each line item in `purchase_order_lines` to its parent purchase order in `purchase_orders`.  \n\n2. **purchase_order_lines \u2192 comp_lot**  \n   - Join Condition: `purchase_order_lines.lot_no = comp_lot.lot_no`  \n   - Description: Links a line item to a specific inventory lot, if applicable.  \n\n3. **purchase_orders \u2192 Company**  \n   - Join Condition: `purchase_orders.vendor_id = Company.CompanyID`  \n   - Description: Links a purchase order to its associated vendor in the `Company` table.  \n\n4. **comp_lot \u2192 purchase_orders**  \n   - Join Condition: `comp_lot.purchase_order = purchase_orders.po_no`  \n   - Description: Links inventory lots to the purchase orders they were purchased on.  \n\n---\n\n#### Relevant Fields for the User Question:\n1. **From `purchase_orders`:**  \n   - `id`: Primary key of the purchase order.  \n   - `pono`: Visual purchase order number.  \n   - `date_issued`: Date the purchase order was issued.  \n   - `revision`: Revision number of the purchase order.  \n   - `revision_date`: Date the purchase order was last revised.  \n   - `po_status`: Status of the purchase order (e.g., Current or Cancelled).  \n\n2. **From `purchase_order_lines`:**  \n   - `po_id`: Foreign key linking to `purchase_orders.id`.  \n   - `drop_date`: Expected shipping and invoicing date from the vendor.  \n   - `po_line_edd`: Expected delivery date of the part.  \n    "
    },
    {
        "id": 457902871630577664,
        "text": "\n    Tags: component, component ID, ordered, purchased, date, year, price, total, quantity, category, type, \n\n#### Tables:\n1. **purchase_orders**  \n   - **Description**: Stores purchase order details covering vendor info, authorization, shipping, and financial terms.  \n   - **COMMENT Section**:  \n     - Tracks order revisions, approvals (`auth_id`, `auth_date`, etc.), and associated notes (`amended_notes`, `order_comments`, `delivery_comments`, `notes`).  \n     - Includes vendor contact details (`vendor_name`, `attention`, `address`, `vendor_email`, `vendor_fax`), shipping methods (`shipping`, `shipping_extra`), and incoterms.  \n     - Contains fields for document attachments and invoicing (`attachments`, `po_email_attachments`, `po_invoicing_check`) plus internal payment terms and status flags (`po_status`, `po_closed`). \n     - **Joins**:  \n       - `purchase_order_lines.po_id = purchase_orders.id` (Each line belongs to a purchase order).  \n       - `comp_lot.purchase_order = purchase_orders.po_no` (Each lot was purchased on a purchase order).  \n       - `purchase_orders.vendor_id = Company.CompanyID`.\n\n2. **purchase_order_lines**  \n   - **Description**: Tracks individual line items for purchase orders, providing detailed insight into each order\u2019s components and pricing.  \n   - **COMMENT Section**:  \n     - The primary key `id` uniquely identifies each line, and `po_id` links the line to its parent order, while `lot_no` optionally ties the line to a specific inventory lot.  \n     - Key fields include `qty_type` (unit of measure), `vendor_code` (vendor\u2019s item identifier), `description`, `price`, and `qty`.  \n     - Shipment dates (`drop_date`, `po_line_edd`) and GST applicability (`gst_applicable_line`) define delivery terms.  \n     - Versioning is tracked via `version_timestamp`, `version_editor`, and `version_number`.  \n     - Order status is managed with `cancelled` and `received` (non-lot items) flags, while authorization controls (`non_preferred_auth`, `price_increase_auth`, `auth_time_price`) and supplementary notes (`pol_purchasing_notes`, `pol_internal_notes`, `pol_freight_tracking`, `pol_risk`, `pol_inspection_instructions`, `pol_supplier_requirements`, `pol_quote_ref`) support internal controls and risk management.  \n     - **Joins**:  \n       - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).\n\n3. **component**  \n   - **Description**: Stores component data representing groups of parts conforming to specific specifications. Each component is uniquely identified (e.g., ID6334) and includes a descriptive field detailing its purpose and application.  \n   - **COMMENT Section**:  \n     - Components are categorized (e.g., capacitor, resistor, end product, subassembly) via the `component.cat_no` field, which links to `category.ID` for added context.  \n     - Functionally equivalent manufacturer parts are grouped under one component ID to support flexible sourcing.  \n     - Sourcing details (including vendor and manufacturer part numbers) are managed in the `comp_src` table, while lot tracking\u2014with identifiers formatted as DDMMYY-X (and appended suffixes for split lots)\u2014is handled in `comp_lot`.  \n     - In-house production details and BOMs (e.g., PCB revisions and codes) are captured in related tables to aid production planning and quality control.  \n     - **Joins**:  \n       - `component.ID = comp_src.ID` (Each sourcing record is linked to a component via its ID).  \n       - `category.cat_no = category.ID` (Each component is of a particular category).\n\n4. **comp_lot**  \n   - **Description**: Tracks detailed information for component lots, providing batch-level visibility into inventory and sourcing.  \n   - **COMMENT Section**:  \n     - The primary key `lot_id` uniquely identifies each lot, while `lot_no` serves as a human-readable identifier formatted as DDMMYY-X, with optional suffixes for split lots.  \n     - Key fields include `lot_date` (creation date), `on_order` (flag to indicate that it is not yet received), `price` (per part in AUD), `on_hand` (current inventory), and `purchase_order` with `purchased_amount` (acquisition details).  \n     - `edd` is the expected delivery date while the lot is on order, after which it represents the receive date.  \n     - The `source_ID` field links each lot to its sourcing record in `comp_src`, ensuring traceability.  \n     - Additional fields capture storage specifics (`location_ID`, `shelf`, `position`, `box_id`), versioning (`version_timestamp`, `version_editor`, `version_number`), quality control data (`qc_notes`, `qc_pass`, `qc_who`, `qc_date`), pricing, and supplementary notes, supporting comprehensive inventory and quality management.  \n     - **Joins**:  \n       - `comp_src.source_ID = comp_lot.source_ID` (Each sourcing record links to a specific lot via `source_ID`).  \n       - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).  \n       - `comp_lot.purchase_order = purchase_orders.pono` (Each lot was purchased on a particular PO).  \n\n5. **comp_src**\n   - **Description**: Stores sourcing details for components, linking each component\u2019s `ID` to its associated vendor and manufacturer data. Records include `vendor_part_no` and `manufacturer_part_no`, ensuring that parts from different manufacturers but functionally equivalent are grouped under a single component. The `manufacturer` field and `vendor_ID` reference corresponding `Company` IDs, facilitating integration with vendor data. The `source_ID` field connects sourcing records to specific component lots in `comp_lot`, enhancing traceability.\n   - **COMMENT Section**:\n     - Join on `component.ID = comp_src.ID` (each sourcing record is linked to a component via its ID).\n     - Join on `comp_src.source_ID = comp_lot.source_ID` (each sourcing record links to a specific lot via `source_ID`).\n     - Join on `comp_src.manufacturer = Company.CompanyID` (each sourcing record is linked to a Company as a manufacturer).\n     - Join on `comp_src.vendor_ID = Company.CompanyID` (each sourcing record is linked to a Company as a vendor).\n\n6. **category**\n   - **Description**: Category table is used to categorize components into different categories - e.g., integrated circuit, capacitor, resistor, metalwork.\n   - **COMMENT Section**:\n     - Key field is `ID`.\n     - `category.category` field is a text field indicating the component category.\n     - Joins to `component` table on `component.cat_no = category.ID`.\n\n---\n\n#### Key Relationships:\n1. **purchase_orders \u2192 purchase_order_lines**:  \n   - `purchase_order_lines.po_id = purchase_orders.id` (Each line belongs to a purchase order).  \n\n2. **purchase_order_lines \u2192 component**:  \n   - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).  \n   - `component.ID` uniquely identifies the component (e.g., 6334).  \n\n3. **purchase_order_lines \u2192 comp_lot**:  \n   - `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).  \n\n4. **comp_lot \u2192 purchase_orders**:  \n   - `comp_lot.purchase_order = purchase_orders.pono` (Each lot was purchased on a particular purchase order).  \n\n5. **comp_lot \u2192 comp_src**:\n   - `comp_lot.source_ID = comp_src.source_ID` (Each lot is linked to a sourcing record for traceability).\n\n6. **comp_lot \u2192 purchase_order_lines**:\n   - `purchase_order_lines.lot_no = comp_lot.lot_no` (Each purchase order line may reference a specific inventory lot).\n\n7. **comp_src \u2192 component**:\n   - `comp_src.ID = component.ID` (Each sourcing record is linked to a specific component).\n\n8. **component \u2192 category**:\n   - Join Condition: `component.cat_no = category.ID`\n   - Description: Links each component to its respective category, providing context for classification (e.g., capacitor, resistor, etc.).\n\n\n---\n\n#### Relevant Fields for the User Question:\n1. **purchase_orders**:  \n   - `id` (INTEGER): Primary key of the purchase orders table.  \n   - `date_issued` (DATE): Date the purchase order was issued.  \n\n2. **purchase_order_lines**:  \n   - `po_id` (INTEGER): Links the line to its parent purchase order.  \n   - `qty` (FLOAT): Quantity ordered.  \n\n3. **component**:  \n   - `ID` (INTEGER): Primary key and text identifier of the component (e.g., 6334).  \n\n4. **comp_lot**:  \n   - `lot_no` (VARCHAR): Key field linking to `purchase_order_lines.lot_no`.  \n   - `purchase_order` (INTEGER): Links the lot to the purchase order number.  \n   - `purchased_amount` (FLOAT): Quantity purchased in the lot.  \n   - `lot_date` (DATE): Date the lot was created. \n   - `price` (FLOAT): Unit price, converted to AUD.\n   - `source_ID` (INTEGER): Links the lot to its sourcing record in `comp_src`.\n   - `edd` (DATE): Expected delivery date (if on order) or the date the lot was received.\n   - `on_order` (TINYINT): Flag indicating if the lot is still on order (1 = on order).\n\n5.- **From `comp_src`**:\n  - `source_ID` (INTEGER): Primary key for the sourcing record.\n  - `ID` (INTEGER): Links the sourcing record to a specific component.\n  - `vendor_ID` (INTEGER): Links the sourcing record to a vendor in the `Company` table.\n  - `manufacturer` (INTEGER): Links the sourcing record to a manufacturer in the `Company` table.\n  - `vendor_part_no` (VARCHAR): Vendor's identifier for the part.\n  - `manufacturer_part_no` (VARCHAR): Manufacturer's identifier for the part.\n\n6. **From `category`**:\n   - `ID`: Primary key and unique identifier for each category.\n   - `category`: Text field indicating the name of the component category.\n\n#### SQL Example:\n\nCapacitators ordered in 2023:\n\nSELECT SUM(qty) AS 'a) TOTAL EVER', SUM(IF(po.date_issued BETWEEN '2023-01-01' AND '2023-12-31',qty,0)) AS 'TOTAL in 2023'\n\nFROM purchase_orders po\n\nJOIN purchase_order_lines plx ON po.id = plx.po_id\n\nJOIN comp_lot cl ON cl.lot_no = plx.lot_no\n\nJOIN comp_src cs ON cs.source_ID = cl.source_ID\n\nJOIN component c ON cs.id = c.id\n\nJOIN category cat ON c.cat_no = cat.ID\n\nAND cat.category = 'capacitor'\n    "
    },
    {
        "id": 458016958938611712,
        "text": "Example Context for question: Can you create a table showing our top 20 vendors from 2015 to 2024, ranked by total spend? Please include the total spend for each vendor, annual totals for each year, and a total row at the bottom.\n\n### Organised Information for the User Question\n\n* * *\n\n#### **User Question**:\n\nCan you create a table showing our top 20 vendors from 2015 to 2024, ranked by total spend? Please include the total spend for each vendor, annual totals for each year, and a total row at the bottom.\n\n* * *\n\n#### **Tables**:\n\n1.  **purchase\\_orders**\n    \n    *   **Description**: Stores purchase order details covering vendor info, authorization, shipping, and financial terms.\n    *   **COMMENT Section**:\n        *   Tracks order revisions, approvals (`auth_id`, `auth_date`, etc.), and associated notes (`amended_notes`, `order_comments`, `delivery_comments`, `notes`).\n        *   Includes vendor contact details (`vendor_name`, `attention`, `address`, `vendor_email`, `vendor_fax`), shipping methods (`shipping`, `shipping_extra`), and incoterms.\n        *   Contains fields for document attachments and invoicing (`attachments`, `po_email_attachments`, `po_invoicing_check`) plus internal payment terms and status flags (`po_status`, `po_closed`).\n        *   **Joins**:\n            *   `purchase_order_lines.po_id = purchase_orders.id` (Each line belongs to a purchase order).\n            *   `comp_lot.purchase_order = purchase_orders.po_no` (Each lot was purchased on a purchase order).\n            *   `purchase_orders.vendor_id = Company.CompanyID`.\n2.  **purchase\\_order\\_lines**\n    \n    *   **Description**: Tracks individual line items for purchase orders, providing detailed insight into each order\u00e2\u0080\u0099s components and pricing.\n    *   **COMMENT Section**:\n        *   The primary key `id` uniquely identifies each line, and `po_id` links the line to its parent order, while `lot_no` optionally ties the line to a specific inventory lot.\n        *   Key fields include `qty_type` (unit of measure), `vendor_code` (vendor\u00e2\u0080\u0099s item identifier), `description`, `price`, and `qty`.\n        *   Shipment dates (`drop_date`, `po_line_edd`) and GST applicability (`gst_applicable_line`) define delivery terms.\n        *   Versioning is tracked via `version_timestamp`, `version_editor`, and `version_number`.\n        *   Order status is managed with `cancelled` and `received` (non-lot items) flags, while authorization controls (`non_preferred_auth`, `price_increase_auth`, `auth_time_price`) and supplementary notes (`pol_purchasing_notes`, `pol_internal_notes`, `pol_freight_tracking`, `pol_risk`, `pol_inspection_instructions`, `pol_supplier_requirements`, `pol_quote_ref`) support internal controls and risk management.\n        *   **Joins**:\n            *   `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).\n3.  **Company**\n    \n    *   **Description**: Lists companies that we do business with, including vendors, manufacturers, and clients.\n    *   **COMMENT Section**:\n        *   Key field: `CompanyID`.\n        *   `CompanyName`: Full name of the company.\n        *   `ShortName`: Internal name that we refer to the company by.\n        *   Flags: `IsVendor`, `IsManufacturer`, `IsClient`.\n        *   **Joins**:\n            *   `purchase_orders.vendor_id = Company.CompanyID` (Links purchase orders to vendors).\n\n* * *\n\n#### **Key Relationships**:\n\n1.  **purchase\\_orders \u00e2\u0086\u0092 purchase\\_order\\_lines**:\n    \n    *   `purchase_order_lines.po_id = purchase_orders.id` (Each line belongs to a purchase order).\n2.  **purchase\\_orders \u00e2\u0086\u0092 Company**:\n    \n    *   `purchase_orders.vendor_id = Company.CompanyID` (Links purchase orders to vendors).\n3.  **purchase\\_order\\_lines \u00e2\u0086\u0092 comp\\_lot**:\n    \n    *   `purchase_order_lines.lot_no = comp_lot.lot_no` (If a line references a specific inventory lot).\n\n* * *\n\n#### **Relevant Fields for the User Question**:\n\n1.  **purchase\\_orders**:\n    \n    *   `id` (INTEGER): Primary key of the purchase orders table.\n    *   `date_issued` (DATE): Date the purchase order was issued.\n    *   `vendor_id` (INTEGER): Links the purchase order to the vendor in the `Company` table.\n    *   `vendor_name` (VARCHAR): Name of the vendor.\n2.  **purchase\\_order\\_lines**:\n    \n    *   `po_id` (INTEGER): Links the line to its parent purchase order.\n    *   `price` (DECIMAL): Price in the purchase order currency.\n    *   `qty` (FLOAT): Quantity ordered.\n3.  **Company**:\n    \n    *   `CompanyID` (INTEGER): Primary key of the company table.\n    *   `CompanyName` (VARCHAR): Full name of the company.\n    *   `IsVendor` (TINYINT): Flag indicating whether the company is a vendor.\n\n* * *\n\n#### **SQL Query Example**:\n\nSELECT \n    c.CompanyName AS VendorName,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2015))) AS Spend\\_2015,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2016))) AS Spend\\_2016,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2017))) AS Spend\\_2017,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2018))) AS Spend\\_2018,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2019))) AS Spend\\_2019,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2020))) AS Spend\\_2020,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2021))) AS Spend\\_2021,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2022))) AS Spend\\_2022,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2023))) AS Spend\\_2023,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2024))) AS Spend\\_2024,\n    ROUND(SUM(pol.price \\* pol.qty \\* (YEAR(po.date\\_issued) = 2025))) AS Spend\\_2025,\n    ROUND(SUM(pol.price \\* pol.qty)) AS TotalSpend\nFROM \n    purchase\\_orders po\nJOIN \n    purchase\\_order\\_lines pol ON po.id = pol.po\\_id\nJOIN \n    Company c ON po.vendor\\_id = c.CompanyID\nWHERE \n    po.date\\_issued BETWEEN '2015-01-01' AND CURDATE()\n    AND c.IsVendor = 1\nGROUP BY \n    c.CompanyName\nORDER BY \n    TotalSpend DESC\nLIMIT 20"
    },
    {
        "id": 458017988452548608,
        "text": "Example Context for question: Can you provide the bom_code, quantity, and target date from the new_Production_Item table specifically for workorder 955, filtering for entries that have a target date falling within April 2025?\n\n### Organised Information\n\n---\n\n#### **User Question**:\nCan you provide the `bom_code`, `quantity`, and `target_date` from the `new_Production_Item` table specifically for workorder 955, filtering for entries that have a target date falling within April 2025?\n\n---\n\n#### **Tables**:\n\n1. **new_Production_Item**:\n   - **Description**: Tracks product build - building a particular BOM (`bom_code`) x quantity. `Target date` indicates when we need parts by.\n   - **COMMENT Section**:\n     - Tracks product builds for specific BOMs (`bom_code`) and quantities (`quantity`).\n     - `target_date` indicates when parts are needed.\n     - **Joins**:\n       - `new_Production_Item.production_order_id = work_orders.workorder` (Links production items to work orders).\n       - `new_Production_Item.PCB_BOM_ID = new_PCB.PCB_BOM_ID` (Links production items to PCB details).\n       - `new_Production_Item.status_id = Production_Item_Status.status_id` (Links production items to their status).\n\n---\n\n#### **Key Relationships**:\n\n1. **new_Production_Item \u2192 work_orders**:\n   - `new_Production_Item.production_order_id = work_orders.workorder` (Links production items to work orders).\n\n2. **new_Production_Item \u2192 new_PCB**:\n   - `new_Production_Item.PCB_BOM_ID = new_PCB.PCB_BOM_ID` (Links production items to PCB details).\n\n3. **new_Production_Item \u2192 Production_Item_Status**:\n   - `new_Production_Item.status_id = Production_Item_Status.status_id` (Links production items to their status).\n\n---\n\n#### **Relevant Fields for the User Question**:\n\n1. **new_Production_Item**:\n   - `bom_code` (VARCHAR): The BOM being built.\n   - `quantity` (INTEGER): Product quantity to build.\n   - `target_date` (DATE): Indicates when parts are needed.\n   - `production_order_id` (INTEGER): Links the production item to the work order.\n\n---\n\n#### **SQL Query Example**:\n\n```sql\nSELECT \n    bom_code, \n    quantity, \n    target_date \nFROM \n    new_Production_Item \nWHERE \n    production_order_id = 955 \n    AND target_date BETWEEN '2025-04-01' AND '2025-04-30';\n```"
    },
    {
        "id": 458018103677157376,
        "text": "Example Context for question: Can you provide the total quantity of component ID 6334 that was picked for Production Items associated with work order 955, specifically for the target date in April 2025, as recorded in the Production_Item_Contents table?\n\n#### **Organized Information**\n\n---\n\n### **Tables**\n\n1. **new_Production_Item**:\n   - **Description**: Tracks product build - building a particular BOM (`bom_code`) x quantity. `Target date` indicates when we need parts by.\n   - **COMMENT Section**:\n     - Tracks product builds for specific BOMs (`bom_code`) and quantities (`quantity`).\n     - `target_date` indicates when parts are needed.\n     - **Joins**:\n       - `new_Production_Item.production_order_id = work_orders.workorder` (Links production items to work orders).\n       - `new_Production_Item.PCB_BOM_ID = new_PCB.PCB_BOM_ID` (Links production items to PCB details).\n       - `new_Production_Item.status_id = Production_Item_Status.status_id` (Links production items to their status).\n\n2. **Production_Item_Contents**:\n   - **Description**: Tracks components picked for a particular production item.\n   - **COMMENT Section**:\n     - Tracks components picked against a specific `Production_Item`.\n     - `quantity` indicates the quantity of components picked.\n     - **Joins**:\n       - `Production_Item_Contents.production_item_id = new_Production_Item.production_id` (Links picked components to production items).\n\n3. **comp_lot**:\n   - **Description**: Tracks detailed information for component lots, providing batch-level visibility into inventory and sourcing.\n   - **COMMENT Section**:\n     - Tracks inventory details for component lots, including `lot_no`, `on_hand` quantity, and sourcing information.\n     - **Joins**:\n       - `comp_lot.source_ID = comp_src.source_ID` (Links lots to sourcing records).\n       - `comp_lot.purchase_order = purchase_orders.pono` (Links lots to purchase orders).\n       - `comp_lot.lot_no = purchase_order_lines.lot_no` (Links lots to specific purchase order lines).\n\n4. **component**:\n   - **Description**: Stores component data representing groups of parts conforming to specific specifications.\n   - **COMMENT Section**:\n     - Each component is uniquely identified (e.g., `ID6334`) and includes a descriptive field detailing its purpose and application.\n     - **Joins**:\n       - `component.ID = comp_src.ID` (Links components to sourcing records).\n       - `component.cat_no = category.ID` (Links components to their categories).\n\n---\n\n### **Key Relationships**\n\n1. **new_Production_Item \u2192 Production_Item_Contents**:\n   - `Production_Item_Contents.production_item_id = new_Production_Item.production_id` (Links picked components to production items).\n\n2. **Production_Item_Contents \u2192 comp_lot**:\n   - `Production_Item_Contents.lot_no = comp_lot.lot_no` (Links picked components to specific lots).\n\n3. **Production_Item_Contents \u2192 component**:\n   - `Production_Item_Contents.component_id = component.ID` (Links picked components to their specifications).\n\n4. **comp_lot \u2192 comp_src**:\n   - `comp_lot.source_ID = comp_src.source_ID` (Links lots to sourcing records).\n\n5. **comp_lot \u2192 purchase_orders**:\n   - `comp_lot.purchase_order = purchase_orders.pono` (Links lots to purchase orders).\n\n---\n\n### **Relevant Fields for the User Question**\n\n#### **new_Production_Item**\n- `production_id` (INTEGER): Primary key for production items.\n- `production_order_id` (INTEGER): Links the production item to the work order.\n- `quantity` (INTEGER): Product quantity to build.\n- `target_date` (DATE): Indicates when parts are needed.\n\n#### **Production_Item_Contents**\n- `production_item_id` (INTEGER): Links to `new_Production_Item.production_id`.\n- `component_id` (INTEGER): Component that was picked.\n- `lot_no` (VARCHAR): Lot number of the picked component.\n- `quantity` (DECIMAL): Quantity of the component picked.\n\n#### **comp_lot**\n- `lot_no` (VARCHAR): Key field for component lots.\n- `on_hand` (DECIMAL): Tracks the quantity in inventory.\n- `purchase_order` (INTEGER): Links the lot to a purchase order.\n\n#### **component**\n- `ID` (INTEGER): Primary key and identifier of the component (e.g., `ID6334`).\n- `description` (TEXT): Description and partial specification of the component.\n\n---\n\n### **SQL Query Example**\n\n```sql\nSELECT \n    SUM(Production_Item_Contents.quantity) AS total_quantity_picked\nFROM \n    new_Production_Item\nJOIN \n    Production_Item_Contents \n    ON new_Production_Item.production_id = Production_Item_Contents.production_item_id\nWHERE \n    new_Production_Item.production_order_id = 955\n    AND Production_Item_Contents.component_id = 6334\n    AND new_Production_Item.target_date BETWEEN '2025-04-01' AND '2025-04-30';\n```\n\n---\n\nThis query calculates the total quantity of component `ID6334` picked for production items associated with work order `955` for the target date in April 2025."
    },
    {
        "id": 458018304596115458,
        "text": "Example Context for question: What is the total quantity of component ID 6334 that was picked for production items associated with work order 955, specifically for the target date in April 2025, as recorded in the Production_Item_Contents table? Additionally, could you provide the category of component ID 6334?\n\nRetrieving cached information from the database...\n\nExample Context for question: Can you provide the total quantity of component ID 6334 that was picked for Production Items associated with work order 955, specifically for the target date in April 2025, as recorded in the Production\\_Item\\_Contents table?\n\n#### **Organized Information**\n\n* * *\n\n### **Tables**\n\n1.  **new\\_Production\\_Item**:\n    \n    *   **Description**: Tracks product build - building a particular BOM (`bom_code`) x quantity. `Target date` indicates when we need parts by.\n    *   **COMMENT Section**:\n        *   Tracks product builds for specific BOMs (`bom_code`) and quantities (`quantity`).\n        *   `target_date` indicates when parts are needed.\n        *   **Joins**:\n            *   `new_Production_Item.production_order_id = work_orders.workorder` (Links production items to work orders).\n            *   `new_Production_Item.PCB_BOM_ID = new_PCB.PCB_BOM_ID` (Links production items to PCB details).\n            *   `new_Production_Item.status_id = Production_Item_Status.status_id` (Links production items to their status).\n2.  **Production\\_Item\\_Contents**:\n    \n    *   **Description**: Tracks components picked for a particular production item.\n    *   **COMMENT Section**:\n        *   Tracks components picked against a specific `Production_Item`.\n        *   `quantity` indicates the quantity of components picked.\n        *   **Joins**:\n            *   `Production_Item_Contents.production_item_id = new_Production_Item.production_id` (Links picked components to production items).\n3.  **comp\\_lot**:\n    \n    *   **Description**: Tracks detailed information for component lots, providing batch-level visibility into inventory and sourcing.\n    *   **COMMENT Section**:\n        *   Tracks inventory details for component lots, including `lot_no`, `on_hand` quantity, and sourcing information.\n        *   **Joins**:\n            *   `comp_lot.source_ID = comp_src.source_ID` (Links lots to sourcing records).\n            *   `comp_lot.purchase_order = purchase_orders.pono` (Links lots to purchase orders).\n            *   `comp_lot.lot_no = purchase_order_lines.lot_no` (Links lots to specific purchase order lines).\n4.  **component**:\n    \n    *   **Description**: Stores component data representing groups of parts conforming to specific specifications.\n    *   **COMMENT Section**:\n        *   Each component is uniquely identified (e.g., `ID6334`) and includes a descriptive field detailing its purpose and application.\n        *   **Joins**:\n            *   `component.ID = comp_src.ID` (Links components to sourcing records).\n            *   `component.cat_no = category.ID` (Links components to their categories).\n\n* * *\n\n### **Key Relationships**\n\n1.  **new\\_Production\\_Item \u00e2\u0086\u0092 Production\\_Item\\_Contents**:\n    \n    *   `Production_Item_Contents.production_item_id = new_Production_Item.production_id` (Links picked components to production items).\n2.  **Production\\_Item\\_Contents \u00e2\u0086\u0092 comp\\_lot**:\n    \n    *   `Production_Item_Contents.lot_no = comp_lot.lot_no` (Links picked components to specific lots).\n3.  **Production\\_Item\\_Contents \u00e2\u0086\u0092 component**:\n    \n    *   `Production_Item_Contents.component_id = component.ID` (Links picked components to their specifications).\n4.  **comp\\_lot \u00e2\u0086\u0092 comp\\_src**:\n    \n    *   `comp_lot.source_ID = comp_src.source_ID` (Links lots to sourcing records).\n5.  **comp\\_lot \u00e2\u0086\u0092 purchase\\_orders**:\n    \n    *   `comp_lot.purchase_order = purchase_orders.pono` (Links lots to purchase orders).\n\n* * *\n\n### **Relevant Fields for the User Question**\n\n#### **new\\_Production\\_Item**\n\n*   `production_id` (INTEGER): Primary key for production items.\n*   `production_order_id` (INTEGER): Links the production item to the work order.\n*   `quantity` (INTEGER): Product quantity to build.\n*   `target_date` (DATE): Indicates when parts are needed.\n\n#### **Production\\_Item\\_Contents**\n\n*   `production_item_id` (INTEGER): Links to `new_Production_Item.production_id`.\n*   `component_id` (INTEGER): Component that was picked.\n*   `lot_no` (VARCHAR): Lot number of the picked component.\n*   `quantity` (DECIMAL): Quantity of the component picked.\n\n#### **comp\\_lot**\n\n*   `lot_no` (VARCHAR): Key field for component lots.\n*   `on_hand` (DECIMAL): Tracks the quantity in inventory.\n*   `purchase_order` (INTEGER): Links the lot to a purchase order.\n\n#### **component**\n\n*   `ID`\u00c2\u00a0(INTEGER): Primary key and identifier of the component (e.g.,\u00c2\u00a0`ID6334`).\n*   `description`\u00c2\u00a0(TEXT): Description and partial specification of the component.\n*   cat\\_no (INTEGER): Links to category.ID\n\n#### **category**\n\n*   `ID`\u00c2\u00a0(INTEGER): Primary key and identifier of the category. Links to component.category\n*   category (TEXT): Category of the component\n\n* * *\n\n#### **SQL Query Example**\n\n    SELECT \n        SUM(Production_Item_Contents.quantity) AS total_quantity_picked\n    FROM \n        new_Production_Item\n    JOIN \n        Production_Item_Contents \n        ON new_Production_Item.production_id = Production_Item_Contents.production_item_id\n    WHERE \n        new_Production_Item.production_order_id = 955\n        AND Production_Item_Contents.component_id = 6334\n        AND new_Production_Item.target_date BETWEEN '2025-04-01' AND '2025-04-30'"
    },
    {
        "id": 458018551117119492,
        "text": "Example Context for question: What is the total quantity of component ID 6334 that was picked for production items associated with work order 955, specifically for the target date in April 2025, as recorded in the Production_Item_Contents table? Additionally, could you provide the category of component ID 6334?\n\n**Organized Information**\n\n* * *\n\n### **Tables**\n\n1.  **new\\_Production\\_Item**:\n    \n    *   **Description**: Tracks product build - building a particular BOM (`bom_code`) x quantity. `Target date` indicates when we need parts by.\n    *   **COMMENT Section**:\n        *   Tracks product builds for specific BOMs (`bom_code`) and quantities (`quantity`).\n        *   `target_date` indicates when parts are needed.\n        *   **Joins**:\n            *   `new_Production_Item.production_order_id = work_orders.workorder` (Links production items to work orders).\n            *   `new_Production_Item.PCB_BOM_ID = new_PCB.PCB_BOM_ID` (Links production items to PCB details).\n            *   `new_Production_Item.status_id = Production_Item_Status.status_id` (Links production items to their status).\n2.  **Production\\_Item\\_Contents**:\n    \n    *   **Description**: Tracks components picked for a particular production item.\n    *   **COMMENT Section**:\n        *   Tracks components picked against a specific `Production_Item`.\n        *   `quantity` indicates the quantity of components picked.\n        *   **Joins**:\n            *   `Production_Item_Contents.production_item_id = new_Production_Item.production_id` (Links picked components to production items).\n3.  **comp\\_lot**:\n    \n    *   **Description**: Tracks detailed information for component lots, providing batch-level visibility into inventory and sourcing.\n    *   **COMMENT Section**:\n        *   Tracks inventory details for component lots, including `lot_no`, `on_hand` quantity, and sourcing information.\n        *   **Joins**:\n            *   `comp_lot.source_ID = comp_src.source_ID` (Links lots to sourcing records).\n            *   `comp_lot.purchase_order = purchase_orders.pono` (Links lots to purchase orders).\n            *   `comp_lot.lot_no = purchase_order_lines.lot_no` (Links lots to specific purchase order lines).\n4.  **component**:\n    \n    *   **Description**: Stores component data representing groups of parts conforming to specific specifications.\n    *   **COMMENT Section**:\n        *   Each component is uniquely identified (e.g., `ID6334`) and includes a descriptive field detailing its purpose and application.\n        *   **Joins**:\n            *   `component.ID = comp_src.ID` (Links components to sourcing records).\n            *   `component.cat_no = category.ID` (Links components to their categories).\n\n* * *\n\n### **Key Relationships**\n\n1.  **new\\_Production\\_Item \u00c3\u00a2\u00c2\u0086\u00c2\u0092 Production\\_Item\\_Contents**:\n    \n    *   `Production_Item_Contents.production_item_id = new_Production_Item.production_id` (Links picked components to production items).\n2.  **Production\\_Item\\_Contents \u00c3\u00a2\u00c2\u0086\u00c2\u0092 comp\\_lot**:\n    \n    *   `Production_Item_Contents.lot_no = comp_lot.lot_no` (Links picked components to specific lots).\n3.  **Production\\_Item\\_Contents \u00c3\u00a2\u00c2\u0086\u00c2\u0092 component**:\n    \n    *   `Production_Item_Contents.component_id = component.ID` (Links picked components to their specifications).\n4.  **comp\\_lot \u00c3\u00a2\u00c2\u0086\u00c2\u0092 comp\\_src**:\n    \n    *   `comp_lot.source_ID = comp_src.source_ID` (Links lots to sourcing records).\n5.  **comp\\_lot \u00c3\u00a2\u00c2\u0086\u00c2\u0092 purchase\\_orders**:\n    \n    *   `comp_lot.purchase_order = purchase_orders.pono` (Links lots to purchase orders).\n\n* * *\n\n### **Relevant Fields for the User Question**\n\n#### **new\\_Production\\_Item**\n\n*   `production_id` (INTEGER): Primary key for production items.\n*   `production_order_id` (INTEGER): Links the production item to the work order.\n*   `quantity` (INTEGER): Product quantity to build.\n*   `target_date` (DATE): Indicates when parts are needed.\n\n#### **Production\\_Item\\_Contents**\n\n*   `production_item_id` (INTEGER): Links to `new_Production_Item.production_id`.\n*   `component_id` (INTEGER): Component that was picked.\n*   `lot_no` (VARCHAR): Lot number of the picked component.\n*   `quantity` (DECIMAL): Quantity of the component picked.\n\n#### **comp\\_lot**\n\n*   `lot_no` (VARCHAR): Key field for component lots.\n*   `on_hand` (DECIMAL): Tracks the quantity in inventory.\n*   `purchase_order` (INTEGER): Links the lot to a purchase order.\n\n#### **component**\n\n*   `ID`\u00c3\u0082\u00c2\u00a0(INTEGER): Primary key and identifier of the component (e.g.,\u00c3\u0082\u00c2\u00a0`ID6334`).\n*   `description`\u00c3\u0082\u00c2\u00a0(TEXT): Description and partial specification of the component.\n*   cat\\_no (INTEGER): Links to category.ID\n\n#### **category**\n\n*   `ID`\u00c3\u0082\u00c2\u00a0(INTEGER): Primary key and identifier of the category. Links to component.category\n*   category (TEXT): Category of the component\n\n* * *\n\n#### **SQL Query Example**\n\n    SELECT component_id, SUM(Production_Item_Contents.quantity) AS total_quantity_picked, category.category AS component_category FROM new_Production_Item JOIN Production_Item_Contents ON new_Production_Item.production_id = Production_Item_Contents.production_item_id JOIN component ON Production_Item_Contents.component_id = component.ID JOIN category ON component.cat_no = category.ID WHERE new_Production_Item.production_order_id = 955 AND Production_Item_Contents.component_id = 6334 AND new_Production_Item.target_date BETWEEN '2025-04-01' AND '2025-04-30' GROUP BY component_id, category"
    }
]